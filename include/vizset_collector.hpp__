/*
 * raytrace.hpp
 *
 *  Created on: Jul 24, 2024
 *      Author: hankm
 */

#ifndef INCLUDE_RAYTRACE_HPP_
#define INCLUDE_RAYTRACE_HPP_

#include <stdio.h>
#include <stdlib.h>
#include <fstream>
#include <boost/filesystem.hpp>

#include "map_server/image_loader.h"
#include "yaml-cpp/yaml.h"
#include "opencv2/opencv.hpp"
#include "costmap_2d/costmap_2d.h"
#include "nav_msgs/MapMetaData.h"

#define ANG_STEP (0.01745) // 2*PI / 360
#define FOV_RADIUS (40)
#define UNKNOWN (127)
#define OCCUPIED (255)
#define FREE (0)

//#define DEBUG_DRAW

using namespace costmap_2d;
namespace set_collector
{

typedef struct VisibleGroup
{
public:
	//VisibleGroup( uint32_t uidx ): mu_self_idx(uidx){};
	VisibleGroup( uint32_t uwidth, uint32_t uheight, uint32_t ux, uint32_t uy, uint32_t uself_idx )
	{
		mu_self_idx = uself_idx;
		m_self_loc.x = ux ;
		m_self_loc.y = uy ;
	};
	~VisibleGroup(){} ;

	inline std::vector<MapLocation> GetMemberLocs() { return m_member_locs; }
	inline std::vector<uint32_t> GetMemberIdxs() { return mu_member_idxs; }

	inline void appendMemberCellIdx( uint32_t uIdx )
	{
		mu_member_idxs.push_back(uIdx);
	}

	inline void appendMemberCellLoc( MapLocation mpts ) { m_member_locs.push_back( mpts ); }

	inline void SetSelfIdx( uint32_t uIdx ){mu_self_idx = uIdx; }

	inline void SetSelfLoc( MapLocation mpts ){m_self_loc = mpts; }

	void SetMemberLocs( const std::vector<MapLocation>& mpt )
	{
		m_member_locs = mpt;
	}
	void SetMemberIdxs( const std::vector<uint32_t>& lidxs )
	{
		mu_member_idxs = lidxs;
	}

	inline uint32_t GetSelfIdx() const { return mu_self_idx ; }

	inline MapLocation GetSelfLoc() const { return m_self_loc; }

private:
	uint32_t mu_self_idx ;
	MapLocation m_self_loc ;
	std::vector<MapLocation> m_member_locs ;
	std::vector<uint32_t> mu_member_idxs ;
}CellGroup;

class SetCollector
{
public:
	SetCollector();
	SetCollector(const nav_msgs::OccupancyGrid& gmap, const int& num_dowsamples);
	~SetCollector();

	void initialize() ;
	void rayTraceLines() ;
	void clusterToThreeLabels( cv::Mat& uImage  );
	void computeVisibiliies( );

	static void on_mouse(int event, int x, int y, int flags, void* userdata);
	void startMouseEvent(  ) ;
	cv::Mat GetMapImg(){ return mcv_map_orig; }
	cv::Mat* GetMapImgPtr() { return &mcv_map_orig; }
	std::vector<VisibleGroup> GetVisibleGroup() const {return  mve_FreeCells; } ;

private:

	cv::Mat mcv_map;
	cv::Mat mcv_map_orig ;
	int mn_numpyrdownsample ;
	int mn_scale ;
	uint8_t* mpcost_translation_table ;
	uint32_t mu_gmheight, mu_gmwidth ;

	// resized (downsampled) height and width
	uint32_t mu_cvheight, mu_cvwidth ;
	double mf_resolution, mf_ox, mf_oy;

	std::vector<VisibleGroup> mve_FreeCells ;
	costmap_2d::Costmap2D mo_costmap;
};



}



#endif /* INCLUDE_RAYTRACE_HPP_ */
